import { faker } from "@faker-js/faker";
import { config } from "dotenv";
import { eq } from "drizzle-orm";
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import { completeTable, internshipsTable, organizationsTable, studentsTable } from "./db/schema.js";
import { formatDateFR } from "./utils.js";

// Charge les variables d'environnement
config({ path: ".env" });

// Configuration de la base de donn√©es
if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL is required");
}
const client = postgres(process.env.DATABASE_URL);
const db = drizzle(client);

// Seed fixe pour avoir des donn√©es reproductibles
faker.seed(12345);

// Nombre d'√©l√©ments √† g√©n√©rer
const N_ORG = 5;
const N_STUD = 8;
const N_COMPLETE = 8;

async function cleanDatabase() {
  console.log("üßπ Nettoyage de la base de donn√©es...");

  try {
    // Supprime dans l'ordre inverse des contraintes (relations d'abord)
    await db.delete(completeTable);
    console.log("   ‚Üí Table Complete vid√©e");

    await db.delete(internshipsTable);
    console.log("   ‚Üí Table Internship vid√©e");

    await db.delete(studentsTable);
    console.log("   ‚Üí Table Student vid√©e");

    await db.delete(organizationsTable);
    console.log("   ‚Üí Table Organization vid√©e");

    console.log("‚úÖ Base de donn√©es nettoy√©e avec succ√®s !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage:", error);
    throw error;
  }
}

async function seedOrganizations() {
  console.log("‚Üí Cr√©ation des organisations...");

  const orgs = Array.from({ length: N_ORG }).map(() => ({
    organization_name: faker.company.name(),
    tutor_firstname: faker.person.firstName(),
    tutor_lastname: faker.person.lastName(),
    organization_type: faker.company.buzzPhrase(),
    organization_country: faker.location.country(),
    organization_city: faker.location.city(),
    organization_postal_code: faker.number.int({ min: 10000, max: 99999 }),
  }));

  const result = await db
    .insert(organizationsTable)
    .values(orgs)
    .returning({ id: organizationsTable.organization_id });

  return result.map((row) => row.id);
}

async function seedStudents(orgIds: number[]) {
  console.log("‚Üí Cr√©ation des √©tudiants...");

  const students = Array.from({ length: N_STUD }).map(() => ({
    student_firstname: faker.person.firstName(),
    student_lastname: faker.person.lastName(),
    student_degree: faker.helpers.arrayElement(["G√©n√©raliste", "IR", "TI Sant√©"]),
    student_course: faker.helpers.arrayElement([
      "Informatique",
      "R√©seaux",
      "Cybers√©curit√©",
      "IA",
      "Biom√©dical",
      "E-sant√©",
      "D√©veloppement web",
      "Syst√®mes embarqu√©s",
      "Data Science",
    ]),
    organization_id: faker.helpers.arrayElement(orgIds),
  }));

  const result = await db
    .insert(studentsTable)
    .values(students)
    .returning({ id: studentsTable.student_id });

  return result.map((row) => row.id);
}

async function seedComplete(studentIds: number[]) {
  console.log("‚Üí Cr√©ation des relations √©tudiant-stage ind√©pendantes...");

  const completes = [];
  let lastInternshipId = 0;

  // Sujets de stages r√©alistes pour l'informatique
  const internshipSubjects = [
    "D√©veloppement d'une application mobile de gestion",
    "S√©curisation du r√©seau informatique de l'entreprise",
    "Analyse de donn√©es avec intelligence artificielle",
    "Cr√©ation d'un chatbot pour le service client",
    "Audit de s√©curit√© des syst√®mes critiques",
    "Interface web pour t√©l√©consultation m√©dicale",
    "Optimisation des performances d'un site e-commerce",
    "Programmation de capteurs IoT pour la domotique",
    "Migration vers le cloud des services internes",
    "D√©veloppement d'une API REST pour mobile",
  ];

  for (let i = 0; i < N_COMPLETE; i++) {
    // Cr√©e un nouveau stage pour chaque relation avec un √©tudiant unique
    const newInternship = await db
      .insert(internshipsTable)
      .values({
        internship_subject: faker.helpers.arrayElement(internshipSubjects),
        internship_confidential: faker.datatype.boolean(),
        internship_dates: formatDateFR(faker.date.past()),
        internship_period: faker.number.int({ min: 8, max: 24 }),
        internship_year: faker.helpers.arrayElement(["1A", "2A", "3A"]),
      })
      .returning({ id: internshipsTable.internship_id });

    lastInternshipId = newInternship[0].id;

    // Chaque √©tudiant n'a qu'un seul stage (relation 1-1)
    completes.push({
      student_id: studentIds[i], // Utilise l'index pour garantir l'unicit√©
      internship_id: newInternship[0].id,
    });
  }

  await db.insert(completeTable).values(completes);
  console.log(`   ‚Üí ${completes.length} relations √©tudiant-stage ind√©pendantes cr√©√©es`);
  return lastInternshipId;
}

async function displayInternshipDetails(internshipId: number) {
  console.log(`\nüîç D√âTAILS COMPLETS DU STAGE ID: ${internshipId}`);
  console.log("=".repeat(60));

  try {
    // R√©cup√®re le stage
    const internship = await db
      .select()
      .from(internshipsTable)
      .where(eq(internshipsTable.internship_id, internshipId))
      .limit(1);

    if (internship.length === 0) {
      console.log("‚ùå Stage non trouv√©");
      return;
    }

    const stage = internship[0];
    console.log("\nüìã INFORMATIONS DU STAGE:");
    console.log(`   ID: ${stage.internship_id}`);
    console.log(`   Sujet: ${stage.internship_subject}`);
    console.log(`   Ann√©e: ${stage.internship_year}`);
    console.log(`   Date: ${stage.internship_dates}`);
    console.log(`   Dur√©e: ${stage.internship_period} semaines`);
    console.log(`   Confidentiel: ${stage.internship_confidential ? "Oui" : "Non"}`);

    // R√©cup√®re tous les √©tudiants assign√©s √† ce stage
    const studentsData = await db
      .select({
        student: studentsTable,
        organization: organizationsTable,
      })
      .from(completeTable)
      .innerJoin(studentsTable, eq(completeTable.student_id, studentsTable.student_id))
      .innerJoin(
        organizationsTable,
        eq(studentsTable.organization_id, organizationsTable.organization_id),
      )
      .where(eq(completeTable.internship_id, internshipId));

    console.log(`\nüë• √âTUDIANTS ASSIGN√âS (${studentsData.length}):`);
    if (studentsData.length === 0) {
      console.log("   Aucun √©tudiant assign√© √† ce stage");
    } else {
      for (const { student, organization } of studentsData) {
        console.log(`\n   ‚Ä¢ ${student.student_firstname} ${student.student_lastname}`);
        console.log(`     ID √âtudiant: ${student.student_id}`);
        console.log(`     Fili√®re: ${student.student_degree}`);
        console.log(`     Parcours: ${student.student_course}`);
        console.log(`     Organisation: ${organization.organization_name}`);
        console.log(`     Tuteur: ${organization.tutor_firstname} ${organization.tutor_lastname}`);
        console.log(
          `     Lieu: ${organization.organization_city}, ${organization.organization_country}`,
        );
      }
    }

    console.log("\n" + "=".repeat(60));
  } catch (error) {
    console.error("‚ùå Erreur lors de l'affichage du stage:", error);
  }
}

async function main() {
  try {
    console.log("üå± D√©but du seeding...");

    await cleanDatabase(); // Ajout du nettoyage de la base de donn√©es

    const orgIds = await seedOrganizations();
    const studentIds = await seedStudents(orgIds);
    // Suppression de seedInternships() - stages cr√©√©s uniquement dans seedComplete
    const lastInternshipId = await seedComplete(studentIds);

    console.log("‚úÖ Seeding termin√© avec succ√®s !");

    // Affiche les d√©tails du dernier stage cr√©√© (devrait avoir 1 seul √©tudiant)
    await displayInternshipDetails(lastInternshipId);

    // Ferme la connexion
    await client.end();
  } catch (error) {
    console.error("‚ùå Erreur lors du seeding:", error);
    process.exit(1);
  }
}

main();
